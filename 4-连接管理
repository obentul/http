#1 ====================================================================================================================

只要服务端/客户端不异常关机，那么TCP链接一旦建立起来，就会保证传输数据的可靠性
如果某一端异常关机，那么对端会收到链接异常关闭的通知

#2 ====================================================================================================================

SSL存在于HTTP和TCP之间，对TCP内容进行加密，然后使用HTTP作为运输载体进行传输。这个操作成为“隧道”

#3 ====================================================================================================================

4要素(本地ip，本地端口，对端ip，对端端口)决定了一个tcp连接，一个tcp连接对应两个socket，一个在本地，一个在对端

#4 ====================================================================================================================

HTTP作为应用层协议，紧密依靠TCP，所以TCP的性能直接决定了HTTP的性能表现

HTTP事务处理的流程极短，除非是并发性能出现瓶颈，所以大多数情况下，http的“慢”是由于TCP的“慢”造成的

总的来说，HTTP的慢有如下几点:
1）DNS域名解析可能会消耗十秒的时间，浏览器中如果直接输入ip地址，这里可以省掉
2）TCP链接的创建，即 三次握手 ，会消耗1~2秒
3）HTTP报文的组装和解析

#5 ====================================================================================================================

#以下内容会造成TCP时延：
1）TCP链接建立握手  (这个无法避免)
	（*）影响：握手的交互会消耗时间

2）TCP慢启动拥塞控制  （为了整个网络考虑，可以理解）

	--拥塞控制--
	当链路中有大量数据时，TCP通过调节滑动窗口的宽度来调节发送队列中的数据量，当拥塞时，通过缩小窗口来使“发送-确认”
	队列数下降，从而达到缓解拥塞的目的。
	滑动窗口相当于 TCP 到 IP 的“门”

	--慢启动--
	不使用慢启动时，应用程序初次发送数据可能会一股脑把数据都丢到网络上去，这样虽然提高了效率，让数据能够尽可能地
	抢占带宽资源，但是负面效果就是 “数据在路由器位置大量积压，耗尽路由器缓存”，从而导致网络拥塞。
	慢启动的思路就是 --> 初次发送时，循序渐进地增加滑动窗口，然流量缓慢进入网络。

	（*）影响：拥塞控制就意味着 为了 网络健康，放弃部分效率，所以效果就是“慢一点”


3）Nagle算法  （为了提高带宽效率）

	Nagle算法的本质就是  “把多个小的TCP数据放在同一个TCP包中，然后在包裹IP发出去” ，提高了效率，但是实效性受到了
	影响，因为小的数据包会在等待区等着别人来和他拼车，不然黑车司机(TCP组包流程)不发车。

	（*）拼车就要等，时效性就低，如果想要快，那么这里可以考虑优化或省略，如果都是大数据包，Nagle算法不会被触发

4）用于捎带确认的TCP延迟确认算法




#1 ====================================================================================================================

#1 ====================================================================================================================

#1 ====================================================================================================================

#1 ====================================================================================================================

#1 ====================================================================================================================

#1 ====================================================================================================================
#1 ====================================================================================================================
#1 ====================================================================================================================
#1 ====================================================================================================================
#1 ====================================================================================================================

