#1 =========================================================================================================
http头中的http版本信息是指发送者那端使用的http协议栈的版本，不是双方协议的版本，更不是接收者的版本，而仅仅指发送者的版本】

#2 =========================================================================================================
对之前方法列表的补冲
	
GET			从服务器上取文档
HEAD			只从服务器上取文档的首部
POST			向服务器发送需要处理的数据
PUT			将报文中的内容部分存到服务器上
OPTION			获知可以在服务器上执行那些方法(GET/PUT/POST等等，有时候服务器会限制某些操作)
TRACE			追踪报文，有时候报文要经过代理服务器，可以使用这个方法来跟踪报文的跳转
DELETE			从服务器上删除某个文档


#3 =========================================================================================================
应答码

100~199   提示信息（流程没结束，只是先告知客户端当前的进度）
200~299   成功
300~399	  资源被移走了，或者资源不在此机器上，此时3xx会把资源在那台机器上告知客户端，让客户端应用程序自己决定要怎么办
400~499	  客户端的请求出错
500~599	  服务器出错



#4  =========================================================================================================
安全方法

安全方法是指 “不会对服务器产生任何改变的方法” ，比如GET和HEAD，这些方法只会从服务器上拿东西，不会造成服务器上
资源的增/删/改

当然了，如果自己编写http应用，在收到GET动作后进行增/删/改，那就另当别论了

HEAD方法除了 “不获取实际内容”，其他和GET一样，可以理解为GET的 DEBUG版本，先取服务器上探测下资源是否存在，以及
资源的基本信息。


#5 =========================================================================================================

PUT方法的语义(存在的初衷)就是让客户端在服务端上创建文档，而文档的名字就是 请求报文中请求行文件名，文件内容
就是请求报文的报文体
PS:如果指定的资源已经存在，那么会覆盖那个资源
PUT 可以理解为 增


POST方法的语义是修改服务端的相关文件或数据。
POST 可以理解为 改


TRACE方法是用来检查网络通路的，HTTP请求个能会经过很多代理，每个中间服务器都可能修改http报文。
（！）TRACE仅仅是探测报文，不携带任何数据，仅仅同来 “检测网络通路” ，最终的目的服务器在收到TRACE请求后(这个TRACE
已经经过了中间的多个代理的修改和跳转)，会应答一个TRACE应答，这个应答中详细记录了 “报文的每一次被跳转和修改”。
其中就有via头字段以表示所有代理的域名和ip

PS:再次强调，TRACE仅仅用来检测网络通路，不携带任何报文体(可以有自己的头字段)，但是，由于各个代理可能对于不同的
方法，会进行不同的操作，比如有的代理可能会直接拦截PUT动作，那么TRACE的局限性就展示出来了，它不能100%的模拟某个
方法的传递流程，所以说 ---> TRACE仅仅是用来检测网络通路


DELETE 就是请求服务器删除其机器上的某个资源。
有一点需要注意，DELETE动作不保证一定成功，而且   --->   
"服务端在不进行删除的情况下，还可以选择不告知客户端自己是否删除，仅仅通过200 OK表示自己知道客户端想执行删除动作"



#6 =========================================================================================================

206 Partial Content

成功执行了一部分 或 Range 请求（客户端可以通过一些特殊的 “首部” 来向服务端请求 一个资源的一部分），如果服务端
返回206，则表明部分请求成功了

206响应中必须包含 Content-range Date ETag 或者 包含Content-Location ，这两种情况任选一种。


详情见15.9

#7 =========================================================================================================

3xx的应答码，表示 “客户端的请求，服务端可以处理，但是要么发现了多个符合条件的资源，要么资源不在我这，但是我知道在哪”

3xx通常需要客户端根据实际情况，进行进一步的应用程序层面的决定，比如知道资源在别的地方，我是取还是不取？比如发现
两个资源都满足条件，客户端需要确认用哪个。



#8 =========================================================================================================
400  ---  客户端的请求有误
401  ---  权限不对
402  ---  保留
403  ---  服务端拒绝提供服务，原因见报文体
404  ---  资源不存在
405  ---  请求的方法不支持，同时应答的首字段中应包含 allow ，用来告知客户端，“服务端接受哪些方法”
406  ---  服务端没有客户端请求的实体类型
407  ---  代理服务器权限不对
408  ---  请求超时
409  ---  请求可能会导致冲突，故不予实施
410  ---  服务器曾经拥有过此资源，同404
411  ---  服务端要求客户端在请求中包含Conten-Length
412  ---  客户端的请求中有条件字段，且字段不满足
413  ---  客户端发送的报文体太大了，服务端处理不了，建议拆开发
414  ---  URI太长了，服务端处理不了
415  ---  媒体类型不支持
416  ---  请求报文中指定的资源范围，超过了服务器中这个资源的实际范围，比如服务器中文件为100M，请求范围是100~200M之间的内容
417  ---  Expect头字段错误



5xx 表示服务器出错

#9 =========================================================================================================

#通用首部字段

通用首部无论是在请求报文中，还是在应答报文中，---> 含义都是一样的 <---

Connection   ---   用来指定与连接有关的内容
Date   	     ---   标识当前报文是何时创建的
MIME-Version ---   报文发送端(客户端/服务端)的MIME版本
Trailer      ---   如果报文分块传输，那么这个就是所有分块的关联标识
Transfer-Encoding  ---  告知接收端，当前报文的编码格式
Update  ---  协议的升级版本
Via  ---  报文经过的中介节点域名/ip


#请求报文专用首部

顾名思义，下属首部字段仅在请求报文中使用

  --基本首部--
Client-IP    ---    客户端的IP地址
From         ---    客户端E-Mail地址
Host         ---    接受请求的服务器 ip 和 port， 服务器可以通过解析这个而字段来判断请求是不是给自己的
Refer        ---    如果当前请求是 来自于某个文件，比如c代码，c++代码，java代码，脚本文件，那么这个字段就表示这个文件的URI
		    相当于给服务端一个对称的定位信息，不仅告知服务端我想要什么资源，还告诉服务端，是谁（文件）想要的
UA-Color    ---    客户端 “显示器” 色彩信息
UA-CPU	    ---    客户端 CPU类型/制造商
UA-Disp     ---    客户端 “显示器” 能力信息
UA-OS       ---    客户端操作系统信息
UA-Pixels   ---    客户端像素信息
User-Agent  ---    发送请求的客户端应用程序信息


  --Accept首部--
Accept      ---    告知服务端，客户端能够接受那些媒体类型，比如 Accept:*/*就表示什么都能接受，text/plain表示只能接受文本
Accept-Charset  ---  告诉服务器，客户端能够接受哪些字符集
Accept-Encoding  ---  告诉服务器，客户端能够接受哪些编码方式
Accept-Language  ---  告诉服务器，客户端能够接受哪些语言
TE  ---  告诉服务器，客户端能够接受哪些扩展编码

  --条件首部--
条件首部是客户端在请求的时候加了一些限制。比如如果客户端已经有了某个资源，那么在请求的时候，可能希望服务端在
收到请求的时候先判断下这个资源是否更改了，如果没有则不需要再返回了，进而节省了传输消耗
Expect   ---  客户端需要服务端所作的行为种类
If-Match   ---   如果实体标记 与 文档的当前实体标记相匹配，就获取文档
If-Modified-Since   ---   仅当资源在此指定日期后被修改过时，才获取。用来获取近期被修改过的资源
If-None-Match   ---   与If-Match相反
If-Range   ---   对文档的某个 范围(多少到多少字节) 进行请求，如果满足则返回，否则应答412，比如文档10M，请求的If-Range:10m-20m则不行
If-Unmodified-Since  ---  If-Modified-since相反
Range  ---  如果服务器支持范围请求，则使用这个字段的值  （这个条件相当与 isRange？Range:412）

  --安全请求首部--
Authorization   ---  客户端的认证信息，让服务端用来验证，比如这里可以放密码
Cookie   ---   客户端给服务端的令牌
Cookie2  ---  Cookie的版本

  --代理请求首部--
Max-Forword   ---  最大跳转次数
Proxy-Authorization  ---  代理进行认证时使用
Proxy-Connection   ---   与Connection，时针对代理的



#响应报文专用首部

  --基本首部--
Age   ---   从最初创建开始，相应持续时间
Public   ---   服务器为其资源提供的方法列表，比如对xxx.txt文件提供GET，为yyy.png提供PUT。
		注意：此属性只针对当前事务而言，一个事务一个样，“不是针对服务器全局能力集，仅针对当前事务的局部能力集”
Retry-After   ---   如果资源不可用，请客户端在这个字段指定的日期/时间 再尝试一次
Server   ---   服务器应用程序信息
Title   ---   HTML标题
Warning  ---  补充告警说明

  --协商首部--
Accept-Ranges    ---    针对此资源，服务器可接受的范围类型
Vary    ---   一个首部字段列表，服务器会从这个列表中选择合适的资源反馈给客户端

  --安全首部--
Proxy-Authenticate   ---   来自代理的客户端质询列表？？？
Set-Cookie   ---   令牌，传给客户端的，方便服务端对客户端进行身份识别
Set-Cookie2  ---   如同Set-Cookie
WWW-Authenticate    ---   来自服务端对客户端的质询列表？？？



#修饰实体内容的首部(请求  和  响应 通用)
实体内容既可以在请求报文中，也可以再响应报文中，所以修饰实体内容的首部字段既可以在请求报文中，也可以在响应报文中
  --基本首部--
Allow    ---   可对实体报文执行的方法
Location   ---   响应报文中，告知客户端，实体的实际位置 ，配合3xx使用

  --内容首部--
Content-Base   ---  解析相对URL时，应该使用的基础URL
Content-Encoding   ---   对实体内容执行的编码格式
Content-Length   ---   实体内容的长度
Content-Language   ---  语言
Content-Location   ---  资源实际位置
Content-MD5    ---    实体内容的MD5校验
Content-Range    ---   在整个资源中，当前报文的实体内容属于哪个范围   （资源可能是分批传输的，当前这个传输会话中，实体内容属于总资源的哪一段）
Content-Type    ---    实体内容所属对象的类型 ，比如穿MP4文件，可能会分批传输，那么这个字段在每一批交互会话中都是 MP4


  --实体缓存首部--
ETag    ---    与实体相关的实体标记
Expires   ---   实体不再有效，要从原始源端再次获取此实体的日期和时间
Last-Modified   ---   当前实体最后一次被修改的时间


#9 =========================================================================================================










#9 =========================================================================================================
#9 =========================================================================================================
#9 =========================================================================================================
