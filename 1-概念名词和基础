#1 ==========================================================================================

http是可靠传输协议(以TCP作为控制层)，和TCP一样，只要执行了发送流程，对端就一定会收到，或者本段
会得到对端是否收的回馈，不会像udp那样不知道消息的处理结果

#2 ===========================================================================================
什么是资源？


资源是指存放在服务器上的一类文件/程序的统称，可以是文本文件，html文件，word文件，图片，视频等等。
这些按照惯例被叫做 “静态资源/文件”。
此外，如果资源时程序，那么这类资源被叫做 “动态资源” ，因为这些资源会根据请求参数的不同，回馈不同
的内容。


#3 ===========================================================================================
资源的类型


如#2中所描述，资源分为 “静态“ 和 ”动态” 两大类，此外，根据http和smtp的分类，其实资源有更加明确的
细分种类，我们使用 “MIME类型” 来标示。


（！）当客户端(浏览器/应用程序)向服务端请求资源时，服务端会将资源类型MIME类型返回给客户端，客户端
会根据考量自己是否能够处理这种MIME类型。
（！）	在 http 报文中， 使用Content-type字段来标注 MIME类型 ， Content-length 标注 资源的大小尺寸

资源除了MIME类型外，还有MIME子类型，比如：

HTML  的Content-type为 text/html  ， text为MIME类型， html为子类型
ASCII文档 为 text/plain
JPEG图片  为 image/jpeg
GIF图片   为 image/gif
ppt文件   为 application/vnd.ms-powerpoint


#4 ===========================================================================================

URI 用来表示资源的位置，  因为ip在全世界范围内是唯一的，http服务的端口号是唯一的，响应端口号
对应的资源根目录是唯一的，操作系统的文件系统路径是唯一的，文件又不能重名，所以  
   --> “URI在全世界范围内可以唯一标识 一个资源位置“ <--


URI是一个概念（纯虚类），对于他的实现，有两种：URL和URN


URL----统一资源定位符
URL地址就是平时看到的网址，由三部分组成：
1）方案，用来表示使用哪种协议，比如http://  ftp://  https:// 等
2）因特网地址，就是网址，比如 www.baidu.com ，这个地址对应一个ip地址
3）资源在服务器上的位置，比如 /root/image.png

URN----统一资源名（目前在实验阶段，还没正式使用）
URN是URL的扩展板，可以认为是区块链模式，即不再使用协议和ip作为区分，所有协议和所有地址都统一
到一个解析服务器上，对应服务器上的唯一一个标识。



#5 ===========================================================================================
事务


http报文的交互，就叫做事务


#方法 ------

目前http请求支持五种不同的方法:
GET  -->   客户端通过发送GET请求给服务器，表示要从服务器上取资源
PUT  -->   客户端通过发送PUT请求给服务器，表示想要把客户端上某个资源推送到服务器上的某个路径下
DELETE  -->  ~~~~~~~~~~~~~~~~~~~~~~~~~~~，客户端想要删除服务器上的某个资源
(!)POST -->   ~~~~~~~~~~~~~~~~~~~~~~~~~~，客户端向服务器上的某个 ”网关应用程序“ 发送数据
HEAD  -->  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~，只要求服务端把http头发回来就行，不要资源(GET的调试版？)


#状态码 -----

状态吗表示服务端对客户端的五种请求方法处理结果给予反馈

200   ---   资源正在返回中
302   ---   请求资源不再我这，但我知道去哪取，我取完在给你，先等着
404   ---   没找到资源，也不知道去哪取


（！）许多时候，资源比较大，那么资源的交互就会被分解为多个事务，比如，客户端先请求html文件，然后
再陆续请求html文件中各个节点的资源(图片/视频/文字)


#6 ===========================================================================================
报文


http报文由三部分组成： 起始行，首部字段，主体

起始行   ----  方法，状态吗，资源名，协议版本等等，主要用来说明当前报文 ”是什么动作“
首部字段 ----  对起始行进行进一步补充说明，表示 ”有哪些附加条件“，是 key-value 模式，用:隔开
	       （！）这一部分结尾后，要用/r/n,即空行结束，用来表示首部字段已经结束了。
主体   ----  实际内容，文本，图片，视频，html文件等等。


	小结：在未进行实际内容传递的时候，前面的交互多以首部字段为主，最后在所有交互选项都协商好
	      后，最后把内容放在主体内，互发给对方。

	技巧：在看http报文的时候，首先找到/r/n,往上看都是首部字段，往下看都是实际内容。

	（！）在分析http报文的时候，更多的时候是看首部字段来判断当前事务的进展情况


#7 ===========================================================================================
连接(TCP/IP)

TCP提供了如下三种基本特性：
1）无差错数据传输
2）按序传输，即到达对端的数据包顺序是发送时的顺序(TCP和TIPC都有乱序处理机制)，如果乱序，接收端的
   TCP会进行重组和响应的乱序重拍。
3）未分组数据流，可以在任意时刻以任意尺寸把数据发送出去


（！）TCP/IP关于链接的建立，实质上是双方TCP/IP协议栈的数据结构的组建，双方互相通知对方自己已经在TCP层
创建了响应的数据结构以存放对方的ip和port信息，以及对应的缓存等等(通过tcp头中的相关字段可以定制缓冲区)
，以及双方对于传输过程中分组大小等信息等都会存入数据结构中。



#8 ===========================================================================================
web组件（名词解释）

代理  ---  客户端和服务端之间的http中间件，只要客户端请求地址不是服务端地址，那么就存在代理
缓存  ---  可能客户端和服务端之间有很多代理，这样每次请求都会从依次经过各个代理，这样效率就变低了，可以
	   把某一些资源存在某些代理中，或者以分布式的方式把服务器备份出多个分配到距离客户端比较近的网络位置
网关  ---  连接其他应用程序的特殊 ”web服务器“，相当于http请求首先集中到这里，然后根据请求内容再去向其他
	   应用程序请求服务，比如通过IPC完成于其他应用程序的沟通
隧道  ---  功能为透传转发的”代理“
Agent代理  ---  所有可以发送http请求的客户端，比如vlc，自己开发的能发送http请求的应用



#代理-----
代理决定了 安全、应用集成 和 性能优化
代理就是服务器的前置，可以对请求进行一定程度的分流和筛选，甚至可以对请求进行一定程度的修改。

#缓存-----
缓存(cache)和代理缓存(proxy cache)是一种特殊的代理服务器，可以服务器上经常被请求的内容暂存在这里，
后面的访问将不在指向服务器，减少通讯节点，提高效率

#网关-----
网关是一个应用程序，作用在于，把http请求转换成其他协议的请求，然后与其他协议的服务器通讯，比如我有一个ftp服务器，
然后有一个http转ftp的网关应用程序，这个网关应用程序会根据http请求中的内容，把请求转换成一个ftp请求，然后发送给
ftp服务器，最后在把ftp资源编入http应答反馈给客户端。

#隧道-----
隧道应用程序主要实现就是透传，而应用场景则是完成加密数据的传输，隧道是实现建立好的HTTP链接，客户端可以使用SSL协议
加密自己的数据，在使用http隧道完成SSL数据的透传，这样中间人就无法通过解析http协议来获取通讯内容了。
隧道多使用SSL加密数据，然后用http作为运载工具来实现加密传输

#Agent代理-----
爬虫，vlc客户端，自写http客户端，浏览器等等都是Agent代理，概括起来，”所有http客户端都是Agent代理“



（！）所有web组件都是  ”应用程序“
（！）不同组件或用于前置功能(代理)，或用于性能提升（缓存），或用于协议转换（网关），或用于运输承载（隧道透传），
	或用于请求发起（Agent代理）











































































